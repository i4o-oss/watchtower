name: Docker Build and Push

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: docker.io
  IMAGE_NAME: i4o-oss/watchtower

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        environment: [production, staging]
        include:
          - environment: production
            dockerfile: ./docker/Dockerfile
            build-args: |
              BUILDKIT_INLINE_CACHE=1
          - environment: staging
            dockerfile: ./docker/Dockerfile
            build-args: |
              BUILDKIT_INLINE_CACHE=1

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch,suffix=-${{ matrix.environment }}
          type=ref,event=pr,suffix=-${{ matrix.environment }}
          type=semver,pattern={{version}},suffix=-${{ matrix.environment }}
          type=semver,pattern={{major}}.{{minor}},suffix=-${{ matrix.environment }}
          type=semver,pattern={{major}},suffix=-${{ matrix.environment }}
          type=raw,value=latest-${{ matrix.environment }},enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ${{ matrix.dockerfile }}
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha,scope=${{ matrix.environment }}
        cache-to: type=gha,mode=max,scope=${{ matrix.environment }}
        build-args: ${{ matrix.build-args }}